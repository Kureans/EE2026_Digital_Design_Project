`timescale 1ns / 1ps

//////////////////////////////////////////////////////////////////////////////////
//
//  FILL IN THE FOLLOWING INFORMATION:
//
//  LAB SESSION DAY (Delete where applicable): MONDAY P.M, TUESDAY P.M, WEDNESDAY P.M, THURSDAY A.M., THURSDAY P.M
//
//  STUDENT A NAME: 
//  STUDENT A MATRICULATION NUMBER: 
//
//  STUDENT B NAME: 
//  STUDENT B MATRICULATION NUMBER: 
//
//////////////////////////////////////////////////////////////////////////////////


module Top_Student (
    input  J_MIC3_Pin3,   // Connect from this signal to Audio_Capture.v
    output J_MIC3_Pin1,   // Connect to this signal from Audio_Capture.v
    output J_MIC3_Pin4,    // Connect to this signal from Audio_Capture.v
    
    input CLOCK, input sw0, sw1,
    output reg [15:0] led,
    output reg [3:0] an, output reg [6:0] seg,
 
     input BTNC,
    output [7:0] JB
    );
    
    
    reg [15:0] led_reg = 0;
    reg [15:0] led_reg_peak = 0;
    reg [15:0] led_reg_peak_display = 0;
    reg [3:0] an_reg = 0;
    reg [6:0] seg_reg = 0;
    
    reg [3:0] peak_volume = 0; //0-15 levels
    reg [3:0] peak_volume_display = 0; //0-15 levels
    reg [11:0] peak_volume_sample_count = 0;
    
    reg [1:0] lmh_switcher = 0; //low medium high
    reg anode_switcher = 0; 
    
    wire clk_20k;
    wire clk_5;
    
    wire [11:0] mic_in;
    clock_divider clk_20khz (CLOCK, 2499, clk_20k);
    clock_divider clk_5hz (CLOCK, 9999999, clk_5); //4999999
    
    
    wire my_fb,send_pix, my_sp,my_samp_pix, my_test_state;
    wire [12:0] my_pix_index;
    wire [15:0] my_oled_data;
    
    wire sixp25clk;
    
    clock_divider sixp25mhz (CLOCK, 7, sixp25clk); 
    single_pulse_circuit pulse (BTNC, CLOCK, my_sp);
    
    

    
    Audio_Capture audio_cap (
    .CLK(CLOCK),                  // 100MHz clock
    .cs(clk_20k),                   // sampling clock, 20kHz
    .MISO(J_MIC3_Pin3),                 // J_MIC3_Pin3, serial mic input
    .clk_samp(J_MIC3_Pin1),            // J_MIC3_Pin1
    .sclk(J_MIC3_Pin4),            // J_MIC3_Pin4, MIC3 serial clock
    .sample(mic_in));     // 12-bit audio sample data
    
       
        Oled_Display myOled (
        .clk(sixp25clk), .reset(my_sp),
        .frame_begin(my_fb), .sending_pixels(send_pix), .sample_pixel(my_samp_pix),
        .pixel_index(my_pix_index),
        .pixel_data(my_oled_data),
        .cs(JB[0]), .sdin(JB[1]), .sclk(JB[3]), .d_cn(JB[4]), .resn(JB[5]), .vccen(JB[6]), .pmoden(JB[7]),
        .teststate(my_test_state)
     );

    
    //assign my_oled_data = 16'h07E0;
     assign my_oled_data[10:5] = mic_in[11:6];


    
    always @ (posedge CLOCK)
        begin
            led <= (sw0) ?  led_reg_peak_display : led_reg;
            an <= an_reg;   
            seg <= seg_reg;
        end
        


    always @ (posedge clk_20k) 
        begin
            if (peak_volume_sample_count == 4000) 
                begin
                peak_volume_sample_count <= 0;
                peak_volume_display <= peak_volume;
                led_reg_peak_display <= led_reg_peak;

                lmh_switcher <= (peak_volume > 10) ? 2 : (peak_volume > 4) ? 1 : 0;
                peak_volume <= 0;
                led_reg_peak <= 0;
                end
               
            else begin //when  peak_volume_sample_count < 4000
                peak_volume_sample_count <= peak_volume_sample_count + 1;
           
           //need include below 2048????? 0???
                if (mic_in > 3968 ) begin
                   led_reg <= 16'b1111_1111_1111_1111;
                   led_reg_peak <= 16'b1111_1111_1111_1111;
                   peak_volume <= 15; end
                   
                else if (mic_in > 3840 ) begin
                    led_reg <= 16'b0111_1111_1111_1111;
                    led_reg_peak <= (peak_volume > 14) ? led_reg_peak : 16'b0111_1111_1111_1111;
                    peak_volume <= (peak_volume > 14) ? peak_volume : 14; end
                    
                else if (mic_in > 3712 ) begin
                    led_reg <= 16'b0011_1111_1111_1111;
                    led_reg_peak <= (peak_volume > 13) ? led_reg_peak : 16'b0011_1111_1111_1111;
                    peak_volume <= (peak_volume > 13) ? peak_volume : 13; end
                    
                else if (mic_in > 3584 ) begin
                    led_reg_peak <= (peak_volume > 12) ? led_reg_peak : 16'b0001_1111_1111_1111;
                    led_reg <= 16'b0001_1111_1111_1111;
                    peak_volume <= (peak_volume > 12) ? peak_volume : 12; end
                    
                else if (mic_in > 3456 ) begin
                    led_reg_peak <= (peak_volume > 11) ? led_reg_peak : 16'b0000_1111_1111_1111;
                    led_reg <= 16'b0000_1111_1111_1111;
                    peak_volume <= (peak_volume > 11) ? peak_volume : 11; end
                    
                else if (mic_in > 3328 ) begin
                    led_reg_peak <= (peak_volume > 10) ? led_reg_peak : 16'b0000_0111_1111_1111;
                    led_reg <= 16'b0000_0111_1111_1111;
                    peak_volume <= (peak_volume > 10) ? peak_volume : 10; end
                    
                else if (mic_in > 3200 ) begin
                    led_reg_peak <= (peak_volume > 9) ? led_reg_peak : 16'b0000_0011_1111_1111;
                    led_reg <= 16'b0000_0011_1111_1111;
                    peak_volume <= (peak_volume > 9) ? peak_volume : 9; end
                    
                else if (mic_in > 3072 ) begin
                    led_reg_peak <= (peak_volume > 8) ? led_reg_peak : 16'b0000_0001_1111_1111;
                    led_reg <= 16'b0000_0001_1111_1111;
                    peak_volume <= (peak_volume > 8) ? peak_volume : 8; end
                    
                else if (mic_in > 2944 ) begin
                    led_reg_peak <= (peak_volume > 7) ? led_reg_peak : 16'b0000_0000_1111_1111;
                    led_reg <= 16'b0000_0000_1111_1111;
                    peak_volume <= (peak_volume > 7) ? peak_volume : 7; end
                    
                else if (mic_in > 2816 ) begin
                    led_reg_peak <= (peak_volume > 6) ? led_reg_peak : 16'b0000_0000_0111_1111;
                    led_reg <= 16'b0000_0000_0111_1111;
                    peak_volume <= (peak_volume > 6) ? peak_volume : 6; end
                    
                else if (mic_in > 2688 ) begin
                    led_reg_peak <= (peak_volume > 5) ? led_reg_peak : 16'b0000_0000_0011_1111;
                    led_reg <= 16'b0000_0000_0011_1111;
                    peak_volume <= (peak_volume > 5) ? peak_volume : 5; end
                    
                else if (mic_in >= 2560  ) begin
                    led_reg_peak <= (peak_volume > 4) ? led_reg_peak : 16'b0000_0000_0001_1111;
                    led_reg <= 16'b0000_0000_0001_1111;
                    peak_volume <= (peak_volume > 4) ? peak_volume : 4; end
                    
                else if (mic_in > 2432 ) begin
                    led_reg_peak <= (peak_volume > 3) ? led_reg_peak : 16'b0000_0000_0000_1111;
                    led_reg <= 16'b0000_0000_0000_1111;
                    peak_volume <= (peak_volume > 3) ? peak_volume : 3; end
                    
                else if (mic_in > 2304 ) begin
                    led_reg_peak <= (peak_volume > 2) ? led_reg_peak : 16'b0000_0000_0000_0111;
                    led_reg <= 16'b0000_0000_0000_0111;
                    peak_volume <= (peak_volume > 2) ? peak_volume : 2; end
                    
                else if (mic_in > 2176 ) begin
                    led_reg_peak <= (peak_volume > 1) ? led_reg_peak : 16'b0000_0000_0000_0011;
                    led_reg <= 16'b0000_0000_0000_0011;
                    peak_volume <= (peak_volume > 1) ? peak_volume : 1; end
                    
                else if (mic_in > 2048  ) begin
                    led_reg_peak <= (peak_volume > 0) ? led_reg_peak : 16'b0000_0000_0000_0001;
                    led_reg <= 16'b0000_0000_0000_0001;
                    peak_volume <= (peak_volume > 0) ? peak_volume : 0; end
                    
                else  begin
                    led_reg_peak <= (peak_volume > 0) ? led_reg_peak : 16'b0000_0000_0000_0000;
                    led_reg <= 16'b0000_0000_0000_0000;
                    peak_volume <= (peak_volume > 0) ? peak_volume : 0; end
            end
            
            
//            if (sw1) 
////                an_reg <= (an_reg == 4'b1110) ? 4'b1101 : 4'b1110; //alternate between 1st and 0th anode
//            else
//                an_reg <= 4'b1110; //show 0th anode

//           if (sw1) begin
////                an_reg <= (an_reg == 4'b1110) ? 4'b1101 : 4'b1110; //alternate between 1st and 0th anode

//              an_reg <= 4'b1110;
            
            anode_switcher <= ~anode_switcher;

            case (anode_switcher)
	
            0: begin //always show this even if sw1 is off
             an_reg <= 4'b1110;
             case(peak_volume_display) //segment
                15: begin seg_reg <= 7'b0001110; end  //F
                14: begin seg_reg <= 7'b0000110; end  //E
                13: begin seg_reg <= 7'b0100001; end  //d
                12: begin seg_reg <= 7'b1000110; end  //C
                11: begin seg_reg <= 7'b0000011; end  //b
                10: begin seg_reg <= 7'b0001000; end  //A
                9: begin seg_reg <= 7'b0010000; end  //9
                8: begin seg_reg <= 7'b0000000; end  //8
                7: begin seg_reg <= 7'b1111000; end  //7
                6: begin seg_reg <= 7'b0000010; end  //6
                5: begin seg_reg <= 7'b0010010; end  //5
                4: begin seg_reg <= 7'b0011001; end  //4
                3: begin seg_reg <= 7'b0110000; end  //3
                2: begin seg_reg <= 7'b0100100; end  //2
                1: begin seg_reg <= 7'b1111001; end  //1
                0: begin seg_reg <= 7'b1000000; end   //0
                endcase
            end
            
            
            1:  begin
		if (sw1) begin //only if sw1 is on
			an_reg <= 4'b1101;
			case(lmh_switcher) //segment
				0: begin seg_reg <= 7'b1000111; end  //L
				1: begin seg_reg <= 7'b1101010; end  //M
				2: begin seg_reg <= 7'b0001001; end  //H
			endcase
		end
            end
        endcase
                                
                        
        end

    always @ (posedge clk_5) 
        begin
        //////////might need to change anode placement
        
                
       
        end


    
endmodule
